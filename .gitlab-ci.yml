## K-Box Continuous Integration script

stages:
  - lint
  - build_frontend
  - build_laravel
  - test
  - build_release
  - release
  - deploy

cache:
  key: "kbox"
  paths:
    - .composer/
    - .yarn/
    - node_modules/

variables:
  CONTAINER_RELEASE_IMAGE_BASE: $CI_REGISTRY/images/k-box

## Making sure that the composer cache folder is the one we have in the CI cache
before_script:
  - export IMAGE_TAG="${CI_COMMIT_REF_NAME#v}_${CI_COMMIT_SHA:0:10}"
  - export CLEANED_CI_COMMIT_REF_NAME="${CI_COMMIT_REF_NAME#v}"
  - echo $IMAGE_TAG
  - export COMPOSER_CACHE_DIR=`pwd`/.composer

## Composer Install script
## performs composer install with dev dependencies and syntax check
.composer_install: &composer_install
  stage: lint
  script:
    - cp env.ci .env
    - composer install --prefer-dist
    - ./vendor/bin/parallel-lint --exclude vendor .
    - php artisan view:clear
    - ./vendor/bin/php-cs-fixer fix --dry-run
    - echo $CI_COMMIT_REF_NAME
    - echo $CI_COMMIT_SHA

## Linting

test-syntax:
  <<: *composer_install
  image: "klinktech/k-box-ci-pipeline-php:7.2"
  tags:
    - docker

test-shell-syntax:
  stage: lint
  image: "koalaman/shellcheck-alpine:latest"
  script:
    - shellcheck ./docker/configure.sh
    - shellcheck ./docker/start.sh
  tags:
    - docker

laravel:
  image: "klinktech/k-box-ci-pipeline-php:7.2"
  tags:
    - docker
  stage: build_laravel
  script:
    - yarn config set cache-folder .yarn
    - yarn
    - yarn run production
    - cp env.ci .env
    - composer install --no-dev --prefer-dist
    - composer run install-content-cli
    - composer run install-language-cli
    - composer run install-streaming-client
  artifacts:
    expire_in: 1 day
    paths:
      - bin/
      - vendor/
      - public/

## Testing

unit_test:
  stage: test
  image: "klinktech/k-box-ci-pipeline-php:7.2"
  services:
    - mariadb:10.3.17 # pinning because of issue https://github.com/docker-library/mariadb/issues/262 and https://gitlab.com/gitlab-org/gitlab-runner/issues/4405
  variables:
    MYSQL_DATABASE: dms
    MYSQL_USER: dms
    MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    MYSQL_PASSWORD: dms
  script:
    - php --ri imagick
    - cp env.ci .env
    - cp env.ci testing.env
    - mkdir ./storage/documents
    - composer install --prefer-dist
    - composer run install-video-cli
    - chmod +x ./bin/bin/packager-linux
    - composer run install-content-cli
    - composer run install-language-cli
    - composer run install-streaming-client
    - php artisan view:clear
    - php artisan config:clear
    - php artisan route:clear
    - php artisan migrate --env=testing --force
    - php artisan db:seed --env=testing --force
    - vendor/bin/phpunit
    - php artisan lang:check --report=translations.txt
  tags:
    - docker
  artifacts:
    expire_in: 1 week
    when: on_failure
    paths:
      - storage/
      - translations.txt

## Release the docker image

## Normal branch release, we create local images for being used during tests
branch_release:
  stage: release
  script:
    - echo $IMAGE_TAG
    - sed -i "s/BUILDVERSION/${CI_COMMIT_REF_NAME}/g" ./config/dms.php
    - sed -i "s/BUILDCODE/${CI_COMMIT_SHA}/g" ./config/dms.php
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:${IMAGE_TAG} .
    - docker push $CI_REGISTRY_IMAGE:${IMAGE_TAG}
    - docker rmi $CI_REGISTRY_IMAGE:${IMAGE_TAG}
  tags:
    - shell
  except:
    - tags

## Tagged releases
tagged_release:
  stage: release
  script:
    - sed -i "s/BUILDVERSION/${CI_COMMIT_REF_NAME}/g" ./config/dms.php
    - sed -i "s/BUILDCODE/${CI_COMMIT_SHA}/g" ./config/dms.php
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CONTAINER_RELEASE_IMAGE_BASE:${CI_COMMIT_REF_NAME#v} .
    - docker login -u $REGISTRY_RELEASE_USERNAME -p $REGISTRY_RELEASE_PASSWORD $CI_REGISTRY
    - docker tag $CONTAINER_RELEASE_IMAGE_BASE:${CI_COMMIT_REF_NAME#v} "$CONTAINER_RELEASE_IMAGE_BASE:latest"
    - docker push "$CONTAINER_RELEASE_IMAGE_BASE:latest"
    - docker push "$CONTAINER_RELEASE_IMAGE_BASE:${CI_COMMIT_REF_NAME#v}"
    - docker rmi "$CONTAINER_RELEASE_IMAGE_BASE:${CI_COMMIT_REF_NAME#v}"
  tags:
    - shell
  only:
    - tags

## Deploy on canary environments
.canary_deploy: &canary_deploy
  when: manual
  stage: deploy
  tags:
    - shell
    - deploy
  dependencies: []
  script:
    - DEPLOY_TAG=$([ -z "${CI_COMMIT_TAG}" ] && echo "${IMAGE_TAG}" || echo "${CLEANED_CI_COMMIT_REF_NAME}")
    - DEPLOY_REGISTRY=$([ -z "${CI_COMMIT_TAG}" ] && echo "${CI_REGISTRY_IMAGE}" || echo "${CONTAINER_RELEASE_IMAGE_BASE}")
    - echo "Deploying ${DEPLOY_REGISTRY} - ${DEPLOY_TAG}..."
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $DEPLOY_REGISTRY:${DEPLOY_TAG}
    - cd $DEPLOY_FOLDER
    - docker tag $DEPLOY_REGISTRY:${DEPLOY_TAG} $DEPLOY_IMAGE
    - docker-compose down -v && docker-compose up -d

canary_manfred_deploy:
  <<: *canary_deploy
  environment: "Canary Manfred"
  variables:
    DEPLOY_FOLDER: $CANARY_M_FOLDER
    DEPLOY_IMAGE: $CANARY_M_IMAGE

canary_filomena_deploy:
  <<: *canary_deploy
  environment: "Canary Filomena"
  variables:
    DEPLOY_FOLDER: $CANARY_F_FOLDER
    DEPLOY_IMAGE: $CANARY_F_IMAGE

canary_try_deploy:
  <<: *canary_deploy
  environment: "Staging on try.kbox.net"
  variables:
    DEPLOY_FOLDER: $STAGING_T_FOLDER
    DEPLOY_IMAGE: $STAGING_T_IMAGE
  only:
    - tags
