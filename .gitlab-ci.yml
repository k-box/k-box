## K-Box Continuous Integration script

stages:
  - lint
  - build_frontend
  - build_laravel
  - test
  - build_release
  - release
  - deploy

cache:
  key: "kbox"
  paths:
  - .composer-cache/
  - .yarn/
  - node_modules/

variables:
    CONTAINER_RELEASE_IMAGE_BASE: $CI_REGISTRY/images/k-box
    CONTAINER_RELEASE_LEGACY_IMAGE_BASE: $CI_REGISTRY/images/dms

## Making sure that the composer cache folder is the one we have in the CI cache
before_script:
  - export COMPOSER_CACHE_DIR=`pwd`/.composer-cache


## Composer Install script
## performs composer install with dev dependencies and syntax check
.composer_install: &composer_install
  stage: lint
  script:
    - cp env.ci .env
    - composer install --prefer-dist
    - ./vendor/bin/parallel-lint --exclude vendor .
    - php artisan view:clear
    - ./vendor/bin/php-cs-fixer fix --dry-run
    - echo $CI_COMMIT_REF_NAME
    - echo $CI_COMMIT_SHA

## Linting

test-syntax:7.0:
  <<: *composer_install
  image: "docker.klink.asia/main/docker-php:7.0-alpine"
  tags:
    - docker

test-shell-syntax:
  stage: lint
  image: "docker.klink.asia/alessio.vertemati/shellcheck-ci:latest"
  script:
    - shellcheck ./docker/configure.sh
    - shellcheck ./docker/start.sh
  tags:
    - docker

frontend:
  image: node:8.11
  stage: build_frontend
  tags:
    - docker
  script:
    - yarn config set cache-folder .yarn
    - yarn
    - yarn run production
  artifacts:
    expire_in: 1 day
    paths:
    - public/

laravel:
  image: "docker.klink.asia/main/docker-php:7.1-alpine"
  tags:
    - docker
  stage: build_laravel
  script:
    - cp env.ci .env
    - composer install --no-dev --prefer-dist
    - composer run install-content-cli
    - composer run install-language-cli
    - composer run install-streaming-client
  artifacts:
    expire_in: 1 day
    paths:
    - bin/
    - vendor/
    - public/js/nls/

## Testing

unit_test:
  stage: test
  image: "docker.klink.asia/main/docker-php:7.1"
  services:
    - mariadb:10.0
  variables:
    MYSQL_DATABASE: dms
    MYSQL_USER: dms
    MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    MYSQL_PASSWORD: dms
  script:
    - cp env.ci .env
    - cp env.ci testing.env
    - mkdir ./storage/documents
    - composer install --prefer-dist
    - composer run install-video-cli
    - chmod +x ./bin/bin/packager-linux
    - composer run install-content-cli
    - composer run install-language-cli
    - composer run install-streaming-client
    - php artisan config:clear
    - php artisan route:clear
    - php artisan migrate --env=testing --force
    - php artisan db:seed --env=testing --force
    - vendor/bin/phpunit
    - php artisan lang:check --report=translations.txt
  tags:
    - docker
  artifacts:
    expire_in: 1 week
    when: on_failure
    paths:
    - storage/
    - translations.txt

## Release the docker image

## Normal branch release, we create local images for being used during tests
branch_release:
  stage: release
  script:
    - sed -i "s/BUILDVERSION/${CI_COMMIT_REF_NAME}/g" ./config/dms.php
    - sed -i "s/BUILDCODE/${CI_COMMIT_SHA}/g" ./config/dms.php
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME#v} .
    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME#v}
  tags:
    - shell
  except:
    - tags

## Tagged releases
tagged_release:
  stage: release
  script:
    - sed -i "s/BUILDVERSION/${CI_COMMIT_REF_NAME}/g" ./config/dms.php
    - sed -i "s/BUILDCODE/${CI_COMMIT_SHA}/g" ./config/dms.php
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME#v} .
    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME#v}
    - docker login -u $REGISTRY_RELEASE_USERNAME -p $REGISTRY_RELEASE_PASSWORD $CI_REGISTRY
    - docker tag $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME#v} "$CONTAINER_RELEASE_IMAGE_BASE:${CI_COMMIT_REF_NAME#v}"
    - docker tag $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME#v} "$CONTAINER_RELEASE_IMAGE_BASE:latest"
    - docker tag $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME#v} "$CONTAINER_RELEASE_LEGACY_IMAGE_BASE:${CI_COMMIT_REF_NAME#v}"
    - docker tag $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME#v} "$CONTAINER_RELEASE_LEGACY_IMAGE_BASE:latest"
    # legacy image registry
    - docker push "$CONTAINER_RELEASE_LEGACY_IMAGE_BASE:latest"
    - docker push "$CONTAINER_RELEASE_LEGACY_IMAGE_BASE:${CI_COMMIT_REF_NAME#v}"
    # new image registry
    - docker push "$CONTAINER_RELEASE_IMAGE_BASE:latest"
    - docker push "$CONTAINER_RELEASE_IMAGE_BASE:${CI_COMMIT_REF_NAME#v}"
  tags:
    - shell
  only:
    - tags

## Deploy on review environments

# ## the test.klink.asia instance with the new image
test_klink_asia_deploy:
  environment: Review
  when: manual
  stage: deploy
  tags:
    - shell
    - deploy
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME#v}
    - cd ${REVIEW_DOCKER_FOLDER}
    - docker tag $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME#v} $REVIEW_DOCKER_IMAGE
    - docker-compose down && docker-compose up -d

## the next.dms.klink.asia instance with the new image
next_dms_klink_asia_deploy:
  environment: Staging
  when: manual
  stage: deploy
  tags:
    - shell
    - deploy
  variables:
    DOCKER_LOCATION: "/opt/next-dms-klink-asia"
  script: 
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME#v}
    - cd ${DOCKER_LOCATION}
    - docker tag $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME#v} dms-migration-environment
    - docker-compose down
    - docker run --rm -v /opt/dms_klink_asia/klink-docker/mnt/:/old/:ro -v /opt/next-dms-klink-asia/data/:/new/:rw debian sh -c "rm -rf /new/* && cp -pr /old/mariadb/ /old/dms-storage/ /new/" # hacky way of removing the old files and copying over the files from the current DMS preview
    - docker-compose up -d

## the instance on test.slmtj.net
test_slmtj_net_deploy:
  environment: Integration
  when: manual
  stage: deploy
  tags:
    - shell
    - deploy
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME#v}
    - cd ${INTEGRATION_DOCKER_FOLDER}
    - docker tag $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME#v} $INTEGRATION_DOCKER_IMAGE
    - docker-compose down && docker-compose up -d
